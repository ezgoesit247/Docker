#!/bin/bash

NAME="--rm"
PRIV=""

function driver {
###
### CASE 1 RUNS/REMOVES UNAMED CONTAINER FOR IMAGE $PWD
###
if [ -z $1 ]; then echo "Looking for container image: ${PWD##*/}"
if ! docker run ${PRIV} -it -P \
  -v ${PWD}:/home/poweruser/_assets.local \
  -v ${HOME}/Docker/_shared_assets:/home/poweruser/_assets \
  -v ${HOME}/.m2:/home/poweruser/.m2 \
  -v ${HOME}/.aws:/home/poweruser/.aws \
  -v ${HOME}/.ssh:/home/poweruser/.ssh \
  --user poweruser \
  --rm \
  ${PWD##*/} 2> /dev/null; then echo -e " Usage:\trun NOARGS must be in parent dir\n\trun [NAME] saves container if PWD is parent dir\n\t else creates rm anonymous"; exit 1; fi
else
###
### CASE 2 STARTS/ATTACHES TO EXISTING NAMED CONTAINER, NAMED AS PWD
###
if ! docker run ${PRIV} -it -P \
  -v "${PWD}":/home/poweruser/_assets.local \
  -v ${HOME}/Docker/_shared_assets:/home/poweruser/_assets \
  -v ${HOME}/.m2:/home/poweruser/.m2 \
  -v ${HOME}/.aws:/home/poweruser/.aws \
  -v ${HOME}/.ssh:/home/poweruser/.ssh \
  --user poweruser \
  --name ${1} \
  ${PWD##*/} 2> /dev/null
   then echo "looking for container ${1}..." && if docker start ${1} > /dev/null 2>&1; then docker attach ${_}
###
### CASE 3a & 3b ARE DEPENDANT ON -n
###   IF -n/name argument DOES NOT EXIST, THEN RUN/REMOVE ANONYMOUS FOR IMAGE ${1}
###      ELSE
### ex 3a run node
### ex 3b run -n=MyNode node
###
   else echo "can't start, running container: docker run ${PRIV} -it -P ${1}" && docker run ${PRIV} -it -P \
     -v "${PWD}":/home/poweruser/_assets.local \
     -v ${HOME}/Docker/_shared_assets:/home/poweruser/_assets \
     -v ${HOME}/.m2:/home/poweruser/.m2 \
     -v ${HOME}/.aws:/home/poweruser/.aws \
     -v ${HOME}/.ssh:/home/poweruser/.ssh \
     --user poweruser \
     ${NAME} \
     ${IMAGE}
fi
fi
fi
}

for i in "$@"
do
case $i in
        -n=*|--name=*)
        NAME="--name ${i#*=}"
        IMAGE=${1}
        shift # past argument=value
        ;;
        -p|--priv)
        PRIV="--privileged"
        IMAGE=${1}
        shift # past argument=value
        ;;
        *)
        IMAGE=${1}
        ;;
esac
done

function driver_test {
   echo $1 $2 $3
   echo ${IMAGE} ${NAME}

}

### HANDLE SPECIAL CASES FOR SPECIFIC IMAGES ###
SECRET=***REMOVED***
DATAVOL=mysql-server-volume
case $1 in
   mysql-server)
CONTAINER=mysql-server
if ! docker ps -a|grep -q ${CONTAINER}; then if ! docker volume list|grep -q ${DATAVOL}; then
      ALTER="ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';"
      echo "Connecting..."
      docker run --name=${CONTAINER} -v ${DATAVOL}:/var/lib/mysql -d ${CONTAINER} > /dev/null 2>&1
      echo "Connecting..." && pswd=`until docker logs ${CONTAINER} 2>&1 | grep -q GENERATED; do sleep 2; done; docker logs ${CONTAINER} 2>&1 | grep GENERATED | awk '{ print $5 }'`
      #echo "root pwd is ${pswd}"
      until docker exec -it ${CONTAINER} mysql -uroot -p`echo ${pswd}` --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${SECRET}';" > /dev/null 2>&1; do sleep 2; done
      #docker rm -f mysql-server
      echo "Root password is: ${SECRET}"
      else docker run --name=${CONTAINER} -v ${DATAVOL}:/var/lib/mysql -d ${CONTAINER} > /dev/null 2>&1; sleep 2
   fi; docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}`
else if ! docker ps|grep -q ${CONTAINER}; then docker start ${CONTAINER}; sleep 2; fi
docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}`

fi

#
   ;;
   mysqld)
CONTAINER=mysqld
if ! docker ps -a|grep -q ${CONTAINER}; then
   docker run -p3306:3306 -v ${DATAVOL}:/var/lib/mysql -d --name mysqld ${CONTAINER} > /dev/null \
      && sleep 2 && docker exec -it ${CONTAINER} bash
else docker start ${CONTAINER} > /dev/null && docker exec -it ${CONTAINER} bash
fi
   ;;
   docker)
PRIV="--privileged"
driver ${@}
   ;;
   *)
driver ${@}
   ;;

esac
