#!/bin/bash

if [ ${DEBUG} ] && [ ${DEBUG} -gt 0 ]; then debug=1; else debug=0; fi;

function DEBUG { if [ ${debug} -eq 1 ]; then echo -e "DEBUG ${*}"; fi }
function VARS { if [ ${debug} -eq 1 ]; then echo -e $(tput setaf 3) "\t\${NAME}:\t\t${NAME}\n\t\${CONTAINER}:\t\t${CONTAINER}\n\t\${INTERACTIVE}:\t\t${INTERACTIVE}\n\t\${NAMEDCONTAINER}:\t${NAMEDCONTAINER}\n\t\${EXT}:\t\t\t${EXT}\n\t\${ENV}:\t\t\t${ENV}\n\t\${RM}:\t\t\t${RM}\n\t\${IMAGE}:\t\t${IMAGE}\n\t\${LCL_IMAGE_VAR}:\t${LCL_IMAGE_VAR}\n\t\${PRIV}:\t\t${PRIV}\n\t\${USER}:\t\t${USER}\n\t\${NETWORK}:\t\t${NETWORK}\n\t\${ENVVAR}:\t\t${ENVVAR}\n\t\${USERNAME}:\t\t${USERNAME}\n\t\${CONX_CLI}:\t\t${CONX_CLI}\n\t\${BINDINGS}:\t${BINDINGS}\n\t\${DEV_BNDGNS}:\t${DEV_BNDGNS}\n********************************$(tput sgr 0)"; fi }

DEBUG "${LINENO} STARTING..." && VARS
function println {
  printf "$1\n" "${@:2}"
}
function error {
  println '\e[31mError(%d): %s\e[m' "$1" "${*:2}"
  exit "$1"
}
function info {
  println '\e[33m%s\e[m' "$*"
}
function green {
  println '\e[32m%s\e[m' "$*"
}
function green1 {
  println '\e[32m(%s): %s\e[m' "$1" "${*:2}"
}
function green2 {
  println '\t(%s)\e[32m %s\e[m' "$1" "${*:2}"
}
function do_it {
  DEBUG "${LINENO} Executing: ${*}" && VARS
  eval ${*};
}
function set_hostname {
  DEBUG ${LINENO} start set_hostname && VARS
  if [[ ${NAME} == "--rm" ]]; then
    if [[ ${IMAGE} == "" ]]; then
      NAME="--hostname ${PWD##*/}${EXT}${ENV} ${NAME}${EXT}${ENV}";
    else
      DEBUG ${LINENO} mid A set_hostname && VARS;
      # NAME="--hostname `basename ${IMAGE}` ${NAME}${EXT}${ENV}";
      NAME="--hostname `basename ${IMAGE}`";
      DEBUG ${LINENO} mid B set_hostname && VARS;fi;
    else H=$(echo ${NAME}|cut -d" " -f2-); NAME="--hostname ${H}${EXT}${ENV} ${NAME}${EXT}${ENV}";
  fi;
  DEBUG ${LINENO} end set_hostname && VARS
}
function print_bindings {
  info VIRTUAL BINDINGS
  v="${BNDGNS} ${BINDINGS}"
  for x in ${v}; do if [[ ${x} != -v ]]; then info ${x}; fi; done
}

function driver {
  DEBUG ${LINENO} FUNCTION driver && VARS
  if [ ${CONX_CLI} ]; then BINBASH=/bin/bash; fi
###
### CASE 1 RUNS/REMOVES UNAMED CONTAINER FOR IMAGE $PWD #
###
  if [ -z $1 ]; then DEBUG ${LINENO} && green "Looking for Case #0"
    if [[ ${PWD##*/} == "u18-systemd" ]]; then DEBUG ${LINENO} calling u18-systemd && VARS && u18-systemd; else
    if [[ ${PWD##*/} == "c7-docker" ]]; then NAME="--hostname c7-docker --rm" && RM="--rm" && IMAGE="local/c7-docker" \
                                          && DEBUG ${LINENO} calling c7-docker && VARS && c7-docker; else
    DEBUG ${LINENO}; echo "Looking for image-container: ${PWD##*/}"
    IMAGE="local/${PWD##*/}"
    CMD="docker run ${RM} ${NETWORK} ${PRIV} ${DETACHED} -it ${PORT} ${NAME} ${USER} ${WORKDIR} ${ENVVAR}"
    RUN_COMMAND="${CMD} ${IMAGE} ${BINBASH}"
    DEBUG ${LINENO} Case \#1 calling do_it && green1 "Case #1" "${CMD} ${IMAGE} ${BINBASH}"
#    local base="$(basename ${IMAGE}|awk -F: '{print $1}')"
#     BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:${USERDIR}/assets.${base##*-} ${BINDINGS}"
#    BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}"
    if [ ! ${NOBIND} ];then print_bindings && CMD="${CMD} ${DEV_BNDGNS} ${BINDINGS}" ;fi
    CMD="${CMD} ${IMAGE} ${BINBASH}"
    if ! do_it "${CMD}"; then green Connecting to ${NAMEDCONTAINER}${EXT}${ENV}...
      docker start ${NAMEDCONTAINER}${EXT}${ENV} >/dev/null \
      && if ! docker exec -it ${NAMEDCONTAINER}${EXT}${ENV} bash; then error ${LINENO} Something did not work; fi;
    fi; fi; fi
###
### CASE 2
###
  else DEBUG ${LINENO} && VARS
    CMD="docker run ${RM} ${NETWORK} ${PRIV} ${DETACHED} ${INTERACTIVE} ${PORT} ${USER} --name"
    LCL_IMAGE_VAR="local/${PWD##*/}"
    DEBUG ${LINENO} Case \#2 calling do_it && green1 "Case #2" "${CMD} ${IMAGE} ${LCL_IMAGE_VAR}"
#    local base="$(basename ${IMAGE}|awk -F: '{print $1}')"
#    BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:${USERDIR}/assets.${base##*-} ${BINDINGS}"
#    BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}"
    if ! do_it "${CMD} ${IMAGE} ${DEV_BNDGNS} ${BINDINGS} ${LCL_IMAGE_VAR}"
###
### CASE 3
###
      then CMD="docker start ${IMAGE}"
      DEBUG ${LINENO} Case \#3a calling do_it && green1 "Case #3a" "${CMD}"
      if do_it ${CMD}; then
        CMD="docker exec -it ${IMAGE} /bin/bash"
        DEBUG ${LINENO} Case \#3b calling do_it && green1 "Case #3b" "${CMD}"
        do_it ${CMD}
###
### CASE 4
###
      else
        CMD="docker run ${RM} ${NETWORK} ${PRIV} ${DETACHED} ${INTERACTIVE} ${PORT} ${NAME} ${USER} ${WORKDIR} ${ENVVAR}"
#        RUN_CMD="${CMD} ${IMAGE} ${BINBASH}"
        DEBUG ${LINENO} Case \#4 calling do_it && green1 "Case #4" "${CMD} ${IMAGE} ${BINBASH}"
        if [ ! ${NOBIND} ];then print_bindings && CMD="${CMD} ${DEV_BNDGNS} ${BINDINGS}" ;fi
        CMD="${CMD} ${IMAGE} ${BINBASH}"
        if ! do_it "${CMD}"; then
          docker start ${NAMEDCONTAINER}${EXT}${ENV} >/dev/null \
          && if ! docker exec -it ${NAMEDCONTAINER}${EXT}${ENV} bash; then error ${LINENO} Something did not work; fi;
        fi
      fi
###
### CASE 5
###
    else
      CMD="docker run ${RM} ${NETWORK} ${PRIV} ${INTERACTIVE} ${PORT} ${USER} ${NAME}"
      info "(${LINENO}) can't start, running container: ${CMD} ${IMAGE}"
      DEBUG ${LINENO} Case \#5 calling do_it && green1 "Case #5" "${CMD} ${IMAGE}"
      do_it "${CMD} ${DEV_BNDGNS} ${IMAGE}"
    fi
  fi

}
### END DRIVER

##### MYSQL SERVER ######
function mysqld-mysqlserver {
  local CONTAINER=${APPVOLUME}${EXT}${ENV} \
  && local DBADMIN=${APPVOLUME}_admin \
  && local VOL=${APPVOLUME}${ENV}${EXT}
  if docker_volume_check ${VOL}
  then DEBUG "${LINENO} mysqlserver-a-create-new-database" && mysqld_create_database ${VOL} ${APPVOLUME} ${CONTAINER} ${DBADMIN}
    else DEBUG "${LINENO} mysqlserver-b-start-container" && if ! container_start ${CONTAINER}
      then DEBUG "${LINENO} mysqlserver-c-run-container" && run_mysqld_container ${VOL} ${CONTAINER}; fi
  fi
  if [ ${CONX_MYSQL} ]; then echo connecting... && sleep 1 \
    && while ! mysqld_connect ${CONTAINER} ${SECRET}; do sleep 1; done
  fi
  if [ ${CONX_CLI} ]; then echo connecting... && sleep 1 \
    && while ! connect_cli ${CONTAINER}; do sleep 1; done
  fi
}
function mysqld_create_database {
  local VOL=${1} && local DATABASE=${2} && local CONTAINER=${3} && local DBADMIN=${4}
  DEBUG ${LINENO} "DATABASE: ${DATABASE} | CONTAINER: ${CONTAINER} | DBADMIN: ${DBADMIN}"
  if ! run_mysqld_container ${VOL} ${CONTAINER}; then return 1; else
    UPDATE_ROOT_PASSWORD="ALTER USER 'root'@'localhost' IDENTIFIED BY '${SECRET}';"
    echo "building database..." \
    && pswd=`until docker logs ${CONTAINER} 2>&1 | grep -q GENERATED; do sleep 2; done; docker logs ${CONTAINER} 2>&1 | grep GENERATED | awk '{ print $5 }'`
    until docker exec ${CONTAINER} mysql -uroot -p`echo ${pswd}` --connect-expired-password -e "${UPDATE_ROOT_PASSWORD}" > /dev/null 2>&1; do
      sleep 1;
    done

    ALTER_ROOT="UPDATE mysql.user SET host='%' WHERE USER='root';FLUSH PRIVILEGES"
    ROOT_REMOTE_ACCESS="GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '${SECRET}' WITH GRANT OPTION;FLUSH PRIVILEGES;"
    CREATE_DATABASE="CREATE DATABASE ${DATABASE};"
    DB_USER="CREATE USER IF NOT EXISTS ${DBADMIN} IDENTIFIED BY '${SECRET}'; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX, REFERENCES ON ${DATABASE}.* TO '${DBADMIN}'@'%';"
    CMD="docker exec ${CONTAINER} mysql -uroot -p`echo ${SECRET}` -e"

    DEBUG ${CMD} "${CREATE_DATABASE}"
    if [ ${debug} -eq 0 ]; then ${CMD} "${CREATE_DATABASE}" 2>/dev/null
    else ${CMD} "${CREATE_DATABASE}"; fi

    DEBUG ${CMD} "${ROOT_REMOTE_ACCESS}"
    if [ ${debug} -eq 0 ]; then ${CMD} "${ROOT_REMOTE_ACCESS}" 2>/dev/null
    else ${CMD} "${ROOT_REMOTE_ACCESS}"; fi

    DEBUG ${CMD} "${DB_USER}"
    if [ ${debug} -eq 0 ]; then ${CMD} "${DB_USER}" 2>/dev/null
    else ${CMD} "${DB_USER}"; fi

    echo "created database ${DATABASE}, ${DBADMIN} / ${SECRET}"
    echo "root password is: ${SECRET}"
  fi
}
function run_mysqld_container {
  local VOL=${1} && local CONTAINER=${2} && if [[ ${PORT} == "-P" ]]; then PORT="-p 3306:3306"; fi
  CMD="docker run ${NETWORK}  -v ${VOL}:/var/lib/mysql ${PORT} --name=${CONTAINER} --hostname=${CONTAINER} -d ${IMAGE}"
  DEBUG ${LINENO} ${CMD} && VARS
  ${CMD} >/dev/null
}
function mysqld_connect {
  local CONTAINER=${1} && local PSWD=${2}
  CMD="docker exec -it ${CONTAINER} mysql -uroot -p`echo ${PSWD}`"
  ${CMD} 2>/dev/null
}
function container_start {
  local CONTAINER=${1}
  docker start ${CONTAINER} >/dev/null 2>&1 && green ${CONTAINER} is running
}
function connect_cli {
  local CONTAINER=${1}
  CMD="docker exec -it ${CONTAINER} /bin/bash"
  ${CMD} 2>/dev/null
}
function docker_volume_check {
  local DOCKER_VOLUME=${1}
  DEBUG "${LINENO} docker_volume_check: ${DOCKER_VOLUME}"
  if ! docker volume ls|grep -q ${DOCKER_VOLUME}
    then if docker volume create ${DOCKER_VOLUME} >/dev/null
      then echo "New Docker Volume: ${DOCKER_VOLUME}" && return 0; fi
    else local _ARY_=($(docker volume ls|grep ${DOCKER_VOLUME}))
      DEBUG "${LINENO} Docker Volume: ${_ARY_[@]}" \
      && return 1; fi
}

### MYSQL-SERVER ###
function mysql-server {
   local CONTAINER=mysql-server
   DEBUG "Local container variable: ${CONTAINER}" && DEBUG "Local data volume variable: ${MYSQLVOL}"
   if ! docker ps -a|grep -q ${CONTAINER}; then DEBUG "${LINENO}-A"; if ! docker volume list|grep -q ${MYSQLVOL}; then DEBUG "${LINENO}-B";
         ALTER="ALTER USER 'root'@'localhost' IDENTIFIED BY 'password';"
         echo "Connecting..."
         docker run ${NETWORK}  -p3306:3306 --name=${CONTAINER} -v ${MYSQLVOL}:/var/lib/mysql -d ${CONTAINER} > /dev/null 2>&1
         echo "Connecting..." && pswd=`until docker logs ${CONTAINER} 2>&1 | grep -q GENERATED; do sleep 2; done; docker logs ${CONTAINER} 2>&1 | grep GENERATED | awk '{ print $5 }'`
         #echo "root pwd is ${pswd}"
         until docker exec -it ${CONTAINER} mysql -uroot -p`echo ${pswd}` --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${SECRET}';" > /dev/null 2>&1; do sleep 2; done
         #docker rm -f mysql-server
         echo "Root password is: ${SECRET}"
         else DEBUG "${LINENO}"; docker run ${NETWORK}  -p3306:3306 --name=${CONTAINER} -v ${MYSQLVOL}:/var/lib/mysql -d ${CONTAINER} > /dev/null 2>&1
      fi; if ! ${MYSQLD_DETACHED}; then DEBUG "${LINENO}"; sleep 2; docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}`; fi
   else if ! docker ps|grep -q ${CONTAINER}; DEBUG "${LINENO}"; then docker start ${CONTAINER}; fi
      if ! ${MYSQLD_DETACHED}; then DEBUG "${LINENO}"; sleep 2; docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}`; fi
   fi
}


### MYSQLD ###
function mysqld {
   local CONTAINER=mysqld
   DEBUG "Local container variable: ${CONTAINER}" && DEBUG "Local data volume variable: ${MYSQLVOL}"
   if ${DASH_N}; then DEBUG "${LINENO}"
      docker run ${NETWORK}  -p3306:3306 -v ${MYSQLVOL}:/var/lib/mysql -d -e MYSQL_ROOT_PASSWORD=${SECRET} --name ${CONTAINER} ${CONTAINER} \
      && if ! ${MYSQLD_DETACHED}; then DEBUG "${LINENO}-A" && echo "Connecting..." && sleep 15; while ! docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}` 2>&1; do DEBUG "${LINENO}-B" && echo "Connecting..." && sleep 2; continue; done; fi
   else  DEBUG "${LINENO}"
      docker run ${NETWORK}  -p3306:3306 -v ${MYSQLVOL}:/var/lib/mysql -d --name ${CONTAINER} ${CONTAINER} > /dev/null 2>&1
      DEBUG "${LINENO}-A"; docker start ${CONTAINER} && if ! ${MYSQLD_DETACHED}; then DEBUG "${LINENO}-B"; sleep 2 && docker exec -it ${CONTAINER} mysql -uroot -p`echo ${SECRET}`; fi
   fi
}



### C7-DOCKER ###
function c7-docker {
  DEBUG ${LINENO} top of c7-docker && VARS
  local base="$(basename ${IMAGE}|awk -F: '{print $1}')" &&       BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}" # && BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:/root/assets.${base##*-} ${BINDINGS}"
  EMBED="docker run ${NETWORK}  --privileged -d ${PORT} -v /sys/fs/cgroup:/sys/fs/cgroup:ro ${DEV_BNDGNS} ${BINDINGS} ${NAME} local/c7-docker"
  DEBUG ${LINENO} EMBED ${EMBED}
  GUID=$(${EMBED})
  DEBUG ${LINENO} GUID ${GUID}
  CMD="docker exec -it ${GUID} /bin/bash"
  DEBUG ${LINENO} CMD ${CMD}
  if [[ ${NAME} = "--rm" ]] || [[ ${RM} = "--rm" ]]; then DEBUG ${LINENO}; CMD="${CMD}; docker rm -f ${GUID} >/dev/null"; fi
  DEBUG ${LINENO} NAME ${NAME}
  DEBUG ${LINENO} Executing:${CMD}
  eval ${CMD}
  #$(${CMD})
}


### C7-SYSTEMD ###
function c7-systemd {
   local base="$(basename ${IMAGE}|awk -F: '{print $1}')" && BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}" #&& BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:/root/assets.${base##*-} ${BINDINGS}"
   CMD="docker run ${NETWORK}  --privileged -d ${PORT} -v /sys/fs/cgroup:/sys/fs/cgroup:ro ${DEV_BNDGNS} ${BINDINGS} --name c7-systemd --rm local/c7-systemd" && DEBUG "${LINENO} Executing:${CMD}"
   GUID=`${CMD}`
   CMD="docker exec -it ${GUID} /bin/bash && docker rm -f ${GUID} > /dev/null"
   eval ${CMD}
}


### C7 ###
function c7 {
   local base="$(basename ${IMAGE}|awk -F: '{print $1}')" && BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}" # && BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:/root/assets.${base##*-} ${BINDINGS}"
   CMD="docker run ${NETWORK}  --privileged -it ${PORT} ${DEV_BNDGNS} ${BINDINGS} ${NAME} c7" && DEBUG "${LINENO} Executing:${CMD}"
   eval ${CMD}
}


### U18-SYSTEMD ###
function u18-systemd {
   print_bindings
   local base="$(basename ${IMAGE}|awk -F: '{print $1}')" && BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${base##*-}-application,target=${USERDIR}/assets.${base##*-} ${BINDINGS}"#&& BINDINGS="-v ${HOME}/Docker/assets.${base##*-}-application:/root/assets.${base##*-} ${BINDINGS}"
   CMD="docker run ${NETWORK}  --privileged -d --tmpfs /tmp --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro ${USER} ${DEV_BNDGNS} ${BINDINGS} --hostname=u18-systemd --name u18-systemd --rm local/u18-systemd" && DEBUG "${LINENO} Executing:${CMD}"
   GUID=`${CMD}`
   CMD="docker exec -it ${GUID} /bin/bash; docker rm -f ${GUID} > /dev/null" && DEBUG "${LINENO} Executing:${CMD}"
   eval ${CMD}
}


### THIS STARTS MAIN MORE OR LESS ###
PWD=$(pwd)
NAME="--rm"
USER="" && PRIV="" && PORT="-P"
DASH_N=false
MYSQLD_DETACHED=false
DETACHED=

USERNAME=default_virtual
USERDIR=/home/${USERNAME}
ROOT_BIND=" -v ${HOME}/Docker/_shared_assets:/root/_assets"

if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $* is: ' && echo "${*}"; fi
DEBUG ${LINENO} && VARS

### GET PARAMETERS ###
### INFINITY PREVENTION COUNTERS ###
HITENV=0
HITUSER=0
for i in "$@"
do
  DEBUG ${LINENO} && VARS
  if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $# is ' && echo -n "$#" && echo -n ': $* is: ' && echo "${*}"; fi
  if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $# is ' && echo -n "$#" && echo -n ': $1 is: ' && echo "${1}"; fi
case $i in
-n)
  NAMEDCONTAINER="${PWD##*/}"
  NAME="--name ${NAMEDCONTAINER}"
  DEBUG "${LINENO} SET \$NAMEDCONTAINER:${NAMEDCONTAINER}" && VARS
  shift
  ;;
-n=*|--container=*|--name=*)
  NAMEDCONTAINER="${i#*=}"
  NAME="--name ${NAMEDCONTAINER}"
  DEBUG "${LINENO} SET \$NAMEDCONTAINER:${NAMEDCONTAINER}" && VARS
  shift
  ;;
--env=*)
  ENV_ARG="${i#*=}"
  ENV="_${i#*=}"
#  if [[ ${i#*=} == "dev" ]]; then
#    DEV_BNDGNS="${DEV_BNDGNS} -v ${PWD}/assets.docker:${USERDIR}/local.assets"
#    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.m2:${USERDIR}/.m2"
#    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.aws:${USERDIR}/.aws"
#    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.ssh:${USERDIR}/.ssh"
#  fi
  DEBUG ${LINENO} && VARS
  shift
  ;;
--ext=*|--appext=*|--purpose=*)
  EXT="_${i#*=}"
  shift
  ;;
--app=*|--appvol=*)
  APPVOLUME_ARG="${i#*=}"
  APPVOLUME="${i#*=}"
  NETWORKNAME="${APPVOLUME}_network${ENV}"
  NETWORK="--network ${NETWORKNAME}"
  docker network create ${NETWORKNAME} >/dev/null 2>&1
  DEBUG ${LINENO} && VARS
  shift
  ;;
--localapp)
  LOCAL_APP="${i#*=}"
  DEBUG ${LINENO} && VARS
  shift
  ;;
--network=*|--net=*)
  NETWORK_ARG="${i#*=}"
  NETWORKNAME="${i#*=}_network"
  NETWORK="--network ${NETWORKNAME}"
  docker network create ${NETWORKNAME} >/dev/null 2>&1
  DEBUG ${LINENO} && VARS
  shift
  ;;
-u)
  shift
  USER_ARG="${1}"
  USER="--user ${1}"
  USERNAME=${1}
  DEBUG ${LINENO} && VARS
  shift
  ;;
--user=*)
  USER_ARG="${i#*=}"
  USER="--user ${i#*=}"
  USERNAME=${i#*=}
  if [[ ${USERNAME} == root ]]; then USERDIR=/${USERNAME} ; else USERDIR="/home/${USERNAME}"; fi
  DEBUG ${LINENO} && VARS
  shift
  ;;
-w)
  shift
  WORKDIR="--workdir ${1}"
  DEBUG ${LINENO} && VARS
  shift
  ;;
--workdir=*)
  WORKDIR="--workdir ${i#*=}"
  DEBUG ${LINENO} && VARS
  shift
  ;;
--new)
  DASH_N=true
  DEBUG ${LINENO} && VARS
  shift
  ;;
--priv)
  PRIV="--privileged"
  DEBUG ${LINENO} && VARS
  shift
  ;;
-d)
  MYSQLD_DETACHED=true
  DETACHED="-d"
  DEBUG ${LINENO} && VARS
  shift
    ;;
-connect)
  CONX_MYSQL=1
  DEBUG ${LINENO} && VARS
  shift
  ;;
-cli)
  CONX_CLI=1
  DEBUG ${LINENO} && VARS
  shift
  ;;
-p=*|--port=*)
  if [[ ${PORT} == "-P" ]]; then PORT=; fi
  PORT="${PORT} -p ${i#*=}"
  DEBUG ${LINENO} && VARS
  shift
  ;;
-v=*)
  BINDINGS="${BINDINGS} -v ${i#*=}"
  DEBUG ${LINENO} binding set ${BINDINGS}
  shift
  ;;
--checkvol=*)
  DOCKER_VOLUME="${i#*=}"
  DEBUG ${LINENO} checkvol ${DOCKER_VOLUME}
  docker_volume_check ${DOCKER_VOLUME}
  DEBUG ${LINENO} && VARS
  shift
  ;;
--nobind|-int)
  ### THIS STOP ANY BINDINGS OR VOL MAPPING, NO SHARED BASH HISTORY
  NOBIND=NOBIND
  DEBUG ${LINENO} && VARS
  shift
  ;;
--rm)
  RM="--rm"
  DEBUG ${LINENO} && VARS
  shift
  ;;
-I)
  INTERACTIVE="-it"
  DEBUG ${LINENO} && VARS
  shift
  ;;
-e=*)
if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $# is ' && echo -n "$#" && echo -n ': $1 is: ' && echo "${1}"; fi
ENVVARp1=`awk '{print $1}' <<<$(echo $1)`
if [ ${ENVVARp1} ]; then ENVVAR="${ENVVAR} -e ${ENVVARp1#*=}"; fi
ENVVARp1=`awk '{print $2}' <<<$(echo $1)`
if [ ${ENVVARp1} ]; then ENVVAR="${ENVVAR} -e ${ENVVARp1#*=}"; fi
ENVVARp1=`awk '{print $3}' <<<$(echo $1)`
if [ ${ENVVARp1} ]; then ENVVAR="${ENVVAR} -e ${ENVVARp1#*=}"; fi
ENVVARp1=`awk '{print $4}' <<<$(echo $1)`
if [ ${ENVVARp1} ]; then ENVVAR="${ENVVAR} -e ${ENVVARp1#*=}"; fi
if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $# is ' && echo -n "$#" && echo -n ': $2 is: ' && echo "${1}"; fi
DEBUG ${LINENO} && VARS
shift
  ;;
esac
done

### HANDLE SPECIAL CASES FOR SPECIFIC IMAGES ###
SECRET='P@ssw0rd!'
MYSQLVOL=mysql-RUN-server-RUN-volume
IMAGE=${1}

if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $* is: ' && echo "${*}"; fi
VARS

if [ $ENV_ARG ] && [ $USER_ARG ]; then
  if [[ ${USER_ARG} == root ]]; then USERDIR=/${USER_ARG} ; else USERDIR="/home/${USER_ARG}"; fi
  if [[ ${ENV_ARG} == dev ]]; then DEV_BNDGNS=
    DEV_BNDGNS="${DEV_BNDGNS} -v ${PWD}/assets.docker:${USERDIR}/local.assets"
    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.m2:${USERDIR}/.m2"
    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.aws:${USERDIR}/.aws"
#    DEV_BNDGNS="${DEV_BNDGNS} -v ${HOME}/.ssh:${USERDIR}/.ssh"
    BINDINGS="${BINDINGS} -v code-store:/home/${USERNAME}/code-store"
  fi
fi
if [ ${LOCAL_APP} ]; then
  BINDINGS="--mount type=bind,source=${HOME}/Docker/assets.${LOCAL_APP}-application,target=${USERDIR}/assets.${LOCAL_APP} ${BINDINGS}"
fi

if [ ${debug} -eq 1 ]; then echo -n ${LINENO} && echo -n ': $# is: ' && echo -n "${#}" && echo -n ': $* is: ' && echo "${*}"; fi
VARS

#ENV=_noenv
BINDINGS="${BINDINGS} -v ${HOME}/Docker/assets.docker.public:${USERDIR}/public.assets"

DEBUG ${LINENO} top of special cases && VARS
set_hostname
DEBUG ${LINENO} returned from set_hostname && VARS
case $1 in

mongo|mongo:4)
  DEBUG "${LINENO} calling function: mongo"
  IMAGE="mongo:4"
  #echo "${ENVVAR} "&& exit 8
  VARS
  CMD="docker run -d ${NETWORK} ${ENVVAR} ${IMAGE}"
  do_it "${CMD}"
  ;;

mssql2017)

  ;;

local/mysqld-mysqlserver5.7|mysql-server:5.7|mysql/mysql-server:5.7)
  DEBUG "${LINENO} calling function: mysqld-mysqlserver"
  IMAGE="mysql/mysql-server:5.7"
  mysqld-mysqlserver
  ;;

local/mysql-server)
  DEBUG "${LINENO} calling function: mysql-server"
  mysql-server
  ;;

local/mysqld)
  DEBUG "${LINENO} calling function: mysqld"
  mysqld
  ;;

local/u18-docker)
  DEBUG "${LINENO} calling function: driver"
  print_bindings
  BNDGNS=${DEV_BNDGNS}
  PRIV="--privileged"
  driver ${@}
  ;;

c7-docker|local/c7-docker)
  if [[ ${NAME} = "--hostname c7-docker --rm" ]]; then RM="--rm"; fi
  DEBUG "${LINENO} calling function: c7-docker" && VARS
  c7-docker
  ;;

c7-systemd|local/c7-systemd)
  DEBUG "${LINENO} calling function: c7-systemd"
  c7-systemd
  ;;

local/u18-systemd)
  DEBUG "${LINENO} calling function: u18-systemd"
  u18-systemd
  ;;

local/u18-crio)
  DEBUG "${LINENO} calling function: u18-crio"
  u18-crio
  ;;

c7|local/c7)
  DEBUG "${LINENO} calling function: c7"
  c7
  ;;

centos-dev|centos8-developer:systemd|local/centos8-developer:systemd)
  DEBUG "${LINENO} $1"
  if ! docker exec -it $(docker run --hostname centos8 -d --rm --privileged --name centos8-developer -v=docker_vol:/docker_vol -v=/sys/fs/cgroup:/sys/fs/cgroup:ro local/centos8-developer:systemd) /bin/bash 2>/dev/null
  then run centos8-developer 2>/dev/null; fi
  exit 0
  ;;

local/spark-scala-submit|spark-scala-submit|local/spark-scala-template|spark-scala-template)
  DEBUG ${LINENO} spark-scala-submit
  IMAGE="local/spark-scala-submit sbt console"
  CMD="docker run ${NETWORK}  -it --rm"
  DEBUG ${LINENO} calling do_it
  do_it ${CMD} ${DEV_BNDGNS} ${IMAGE}
  ;;

seedling)
  DEBUG "${LINENO} SPECIAL CASE, recalling as: local/u18-seedling ${@}" && VARS
  ${0} local/u18-seedling ${@}
  ;;

seed)
  DEBUG "${LINENO} SPECIAL CASE, recalling as: local/u18-seed ${@}" && VARS
  ${0} local/u18-seed ${@}
  ;;

developer)
  DEBUG "${LINENO} SPECIAL CASE, recalling as: local/u18-developer ${@}" && VARS
  ${0} local/u18-developer ${@}
  ;;


*)
  DEBUG "*** ${LINENO} NOTHING IS SPECIAL ANYMORE ***"
  if [[ ${PWD##*/} == docker ]]; then PRIV="--privileged"; fi
  DEBUG "Calling driver with ${@}" && VARS
  driver ${@}
  ;;

esac
