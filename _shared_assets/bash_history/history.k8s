#1606502083
kubeadm init
#1606502516
mkdir application && mkdir ${_}/guestbook && echo|cat>>${_}/redis-master-deployment.yaml<<EOF
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis:e2e  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
EOF

#1606502532
ll
#1606502570
echo|cat>>./application/guestbook/redis-master-deployment.yaml<<EOF
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis:e2e  # or just image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
EOF

#1606502611
cd application/guestbook/
#1606502620
kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-deployment.yaml
#1606502694
kubeadm init --help
#1606502760
sudo kubeadm init
#1606504961
kubeadm init
#1606505024
sudo kubeadm init
#1606505318
sudo apt-get -y install systemd
#1606506542
sudo apt-get -y install systemd systemctl
#1606506661
docker run -d --name systemd --security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro -t solita/ubuntu-systemd
#1606506665
sudo docker run -d --name systemd --security-opt seccomp=unconfined --tmpfs /run --tmpfs /run/lock -v /sys/fs/cgroup:/sys/fs/cgroup:ro -t solita/ubuntu-systemd
#1606506704
sudo docker logs systemd
#1606506729
docker image
#1606506731
docker images
#1606506739
sudo docker images
#1606506749
docker ps -a
#1606506756
sudo docker ps -a
#1606506770
docker attach ac94f2a0fa94
#1606506775
sudo docker attach ac94f2a0fa94
#1606511765
sudo su -
#1606511871
sudo apt-get systemctl
#1606511880
sudo apt-get systemd
#1606511887
sudo apt-get install systemctl
#1606511902
sudo apt-get install systemd
#1606511978
apt-get install systemd-container
#1606511982
sudo apt-get install systemd-container
#1606512028
apt-get install wireless-tools policykit-1 systemd-container systemd
#1606512032
sudo apt-get install wireless-tools policykit-1 systemd-container systemd
#1606512051
sudo apt-get install duperemove
#1606512067
sudo apt-get install wireless-tools policykit-1 systemd-container systemd
#1606512170
sudo kubeadm init
#1606512187
sudo su -
#1606512902
cd /etc/systed
#1606512962
sudo kubeadm init
#1606513051
sudo vi /etc/fstab
#1606513075
free -h
#1606513094
blkid
#1606513100
sudu blkid
#1606513128
free
#1606513132
swapoff -a 
#1606513136
sudo swapoff -a 
#1606513138
free
#1606513154
sudo swapoff -a 
#1606513164
sudo vi /etc/fstab
#1606513189
swapoff --help
#1606513211
ll /proc/swaps
#1606513231
df -h
#1606513498
cd
#1606513502
clear
#1606513547
sudo kubeadm init
#1606524876
kubeadm init [preflight] If you know what you are doing, you can make a check non-fatal with `
#1606524922
sudo kubeadm init --ignore-preflight-errors=true
#1606524933
which docker
#1607104520
ll
#1607104526
cd _assets
#1607104528
ll
#1607104541
cd ../_assets.local/
#1607104550
ll
#1607104560
cd dockercompose/
#1607104561
LL
#1607104562
ll
#1607104579
docker-compose up
#1607104589
sudo docker-compose up
#1607105250
ll
#1607105255
cd django/
#1607105256
klk
#1607105257
ll
#1607105282
sudo mount -o bind ../../src src/
#1607105348
sudo mount -o bind src/ ../../src
#1607105481
cd ..
#1607105488
sudo docker-compose up
#1607792424
sudo su -
#1607793896
wget https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kubelet
#1607793903
chmod +x kubelet
#1607793913
./kubelet --help
#1607793924
./kubelet --help|grep config
#1607793545
wget https://storage.googleapis.com/kubernetes-release/release/v1.0.3/bin/linux/amd64/kubelet
#1607793582
chmod +x kubelet
#1607793590
mkdir manifests
#1607793608
./kubelet --config=$PWD/manifests
#1607793612
sudo ./kubelet --config=$PWD/manifests
#1607793718
docker ps
#1607793723
sudo docker ps
#1607793762
vi nginx.yaml
#1607793844
mv nginx.yaml manifests/
#1607793851
sudo ./kubelet --config=$PWD/manifests
#1607802683
ls
#1607802691
ls _assets.local/
#1607802702
cd _assets.local/_shared_assets/
#1607802707
ls
#1607802716
cp *yaml ~
#1607802717
cd
#1607802718
ls
#1607802752
mkdir manifests && mv *yaml manifests
#1607802889
LOG="cluster_initialized.log"
#1607802889
api="10.20.0.20"
#1607802889
network="10.20.0.0/16"
#1607802889
NAMESPACE="my-kube-system"
#1607802889
YAML="https://docs.projectcalico.org/v3.9/manifests/calico.yaml"
#1607802903
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network}" 2>&1
#1607802933
echo $?
#1607803010
alias kreset="echo \\"Resetting Cluster\\" && sudo su - -c \\"kubeadm reset -f\\""
#1607803010
alias kinfoall="kubectl get all --all-namespaces --output=wide"
#1607803010
alias kinfoallw="watch kubectl get all --all-namespaces --output=wide"
#1607803010
alias ls="ls -Ahltr --color=auto"
#1607803016
kinfoall
#1607803043
sed -i "/swap/d" /etc/fstab && swapoff -a
#1607803065
sudo sed -i "/swap/d" /etc/fstab && sudo swapoff -a
#1607803124
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network}"
#1607803218
sudo sed -i "/swap/d" /etc/fstab
#1607803220
echo $?
#1607803230
sudo swapoff -a
#1607803233
echo $?
#1607803253
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network} --ignore-preflight-errors=yes"
#1607803267
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network} --ignore-preflight-errors=true"
#1607803275
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network} --ignore-preflight-errors=1"
#1607803281
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network} --ignore-preflight-errors=on"
#1607803379
kubeadm init --help
#1607803402
sudo su - -c "kubeadm init --apiserver-advertise-address=${api}    --pod-network-cidr=${network} --ignore-preflight-errors all"
#1607617548
apt-get update
#1607617553
sudo apt-get update
#1607617623
docker --version
