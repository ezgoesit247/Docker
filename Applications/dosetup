#!/bin/bash

function usage {
  echo "Usage ($(basename ${0})): $(error $*)"
  echo "dosetup -r to remove ${TESTAPP}"
  echo "dosetup -t to run: GENERATE=LOCAL ./dosetup ${TESTAPP} ${TESTPLATFORM} ${TESTVERSION}"
  echo -e "\t GENERATE=[ON | LOCAL] $(basename $0) [APP] [PLATFORM] <VERSION> <ROOT_BUILD>\n\tex: ./dosetup bestappever ubuntu 18.04"
  exit 1
}
function msg {
  printf '\e[33m%s\e[m\n' "$*"
}
function error {
  printf '\e[31m%s\e[m\n' "$*"
}
function build_app {
  msg "Running: GENERATE=LOCAL ./dosetup ${1} ${2} ${3}"
  echo $(GENERATE=LOCAL ./dosetup ${1} ${2} ${3}) >/dev/null
}
function build_test_app {
  local TESTAPP="testapp"
  local TESTPLATFORM="local/node"
  local TESTVERSION="ubuntu"
  build_app ${TESTAPP} ${TESTPLATFORM} ${TESTVERSION}
}
function clean_local {
  echo "cleaning local ${1}" && rm -rf ~/sandbox/assets.docker/${1}/* rm -rf ~/sandbox/${1} rm -rf ~/sandbox/Applications/${1}
}

### parms
TESTAPP="testapp"
ISBUILDTEST=false
for i in "$@"
do
case $i in
-r)
  shift
  clean_local ${TESTAPP}
  exit 0
;;
-t)
  shift
  ISBUILDTEST=true
  clean_local ${TESTAPP}
  build_test_app
  msg ${TESTAPP} built
  exit 0
;;
-c)
  shift
  toclean="${1}"
  shift
  if [ -z "${toclean}" ]; then usage -c expects an argument && exit ${LINENO}; fi
    if [[ "${toclean}" == '*' ]]; then usage 'dont pass *' && exit ${LINENO}; fi
    read -p "remove local traces of: $(msg ${toclean})? (Y/n) " yn
    yn=${yn:-Y}
    if [[ ! ${yn} == Y ]] && [[ ! ${yn} == y ]]; then usage clean exited && exit ${LINENO}; fi
    echo ${toclean} removed
  clean_local ${toclean} && msg ${toclean} cleaned
  shift
  exit 0
;;
esac
done


### GLOBALS ###
if [ ! ${GENERATE} ];then GENERATE="LOCAL";fi

app=$1 && DEVELOPMENT_PLATFORM=$2 && PLATFORM_VERSION=$3 && ROOT_BUILD=$4
if [ ! $app ]; then usage no app; fi
if [ ! $DEVELOPMENT_PLATFORM ]; then usage no platform; fi

TAGLIST=${PLATFORM_VERSION}

EMBED_DOCKER="
### DOCKER ###
RUN sudo apt-get -qq update \
&& sudo apt-get install -qq \
apt-transport-https \
ca-certificates \
gnupg-agent \
software-properties-common \
&& curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \
&& sudo apt-key fingerprint 0EBFCD88 \
&& sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" \
&& sudo apt-get -qq update \
&& sudo apt-get install -qq \
docker-ce \
docker-ce-cli \
containerd.io \
&& sudo usermod -a -G docker \$gituser

RUN echo '### DOCKER ###\n\
if ! sudo service docker status;then sudo service docker start && sleep 1 && sudo service docker status;fi\n\
if docker run --rm hello-world 2>/dev/null|grep -q \"Hello from Docker!\"\n\
then pass \"Docker Hello World\"; else fail \"Docker Hello World\"\n\
fi\n\
cyan \"Docker:\"; docker --version\n\
cyan \"Docker Compose:\"; docker-compose --version' \
>>~/.bashrc

ARG dockerpushnodeapp=\"function dockerpushnodeapp { echo \\\$(cat \\\${DOCKERHUBTOKEN})|docker login -u \\\$(cat \\\${DOCKERHUBUSER}) --password-stdin && docker push \\\$(cat \\\${DOCKERHUBUSER})/\\\$(PACKAGE); }\"
RUN echo '\n\
'\$dockerpushnodeapp'\n\
'\
>>~/.bashrc
"

EMBED_COMPOSE="
### DOCKER COMPOSE ###
RUN sudo curl -sL https://github.com/docker/compose/releases/download/1.21.2/docker-compose-\`uname -s\`-\`uname -m\` -o /usr/local/bin/docker-compose \
&& sudo chmod +x /usr/local/bin/docker-compose
"

EMBED_MONGODB="
### MONGODB ###
VOLUME ${app}
RUN sudo mkdir -p /${app}/lib/mongo \
&& sudo mkdir -p /${app}/log/mongodb \
&& sudo chown -R 1000:1000 /${app} \
&& ln -s /${app} ~/${app}
ARG MONGO_DIR=/usr/local/mongo
ARG MONGO_BIN_DIR=/usr/bin
ARG MONGO=https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2004-4.4.6.tgz
COPY assets.mongo/mongodb.service /etc/init.d/mongodb
RUN sudo mkdir -p \$MONGO_DIR \
&& curl -s \$MONGO | sudo tar zxv --strip-components=1 -C \$MONGO_DIR \
&& sudo ln -fn \$MONGO_DIR/bin/mongo \$MONGO_BIN_DIR \
&& sudo ln -fn \$MONGO_DIR/bin/mongos \$MONGO_BIN_DIR \
&& sudo ln -fn \$MONGO_DIR/bin/mongod \$MONGO_BIN_DIR
RUN sudo mkdir -p /var/lib/mongo  \
&& sudo mkdir -p /var/log/mongodb \
&& sudo chown \$(whoami) /var/lib/mongo \
&& sudo chown \$(whoami) /var/log/mongodb
RUN sudo ln \$MONGO_DIR/bin/mongo /usr/local/sbin/ \
&& sudo ln \$MONGO_DIR/bin/mongod /usr/local/sbin/ \
&& sudo ln \$MONGO_DIR/bin/mongos /usr/local/sbin/
RUN sudo chmod 755 /etc/init.d/mongodb \
&& cd /etc/rc3.d/ && sudo ln -fsn ../init.d/mongodb S01mongodb \
&& cd /etc/rc4.d/ && sudo ln -fsn ../init.d/mongodb S01mongodb \
&& cd /etc/rc5.d/ && sudo ln -fsn ../init.d/mongodb S01mongodb
"
MONGO_USER="
ARG mongo_user=\"\\
use admin\\
db.createUser( {\\
user: \\\"MONGOUSERENAME\\\",\\
pwd: \\\"MONGOUSERPASSWORD\\\",\\
roles: [ { role: \\\"userAdminAnyDatabase\\\", db: \\\"admin\\\" } ]\\
} )\"
RUN mkdir -p ~/mongo_setup \
&& echo \$mongo_user >~/mongo_setup/mongo_user.in.mongo
ARG MONGOOSE=\"#!/bin/sh\nnpm install mongoose\"
RUN echo -e \$MONGOOSE >~/mongo_setup/mongoose
"


EMBED_TREE="sudo apt-get install -qq tree"
EMBED_NMAP="sudo apt-get install -qq nmap -y"
EMBED_USER="
RUN apt-get update && apt-get install -qq sudo curl vim
RUN echo \"ALL ALL=(ALL) NOPASSWD: ALL\" >>/etc/sudoers
ARG gituser
RUN groupadd -g 1000 \$gituser \
&& useradd -ms /bin/bash -u 1000 -g 1000 \$gituser
USER \$gituser
WORKDIR /home/\$gituser
RUN echo '\
export PS1=\"\\\[\\\033[1;34m\\\]\\\u\\\[\\\033[0m\\\]@\\\[\\\033[1;31m\\\]\\\h:\\\[\\\033[0;37m\\\]\\\w\\\[\\\033[0m\\\] \\\$ \"\n\
alias ls=\"ls -Altr --color=auto\"\n\
'\
>>~/.bashrc"

EMBED_GIT="VOLUME ${app}
RUN sudo mkdir /${app} \
&& sudo chown -R 1000:1000 /${app} \
&& ln -s /${app} ~/${app}
ARG gituser
RUN git clone git@github.com:\$gituser/${app} /${app}"

EMBED_MONGODB_SYSTEMD="
#RUN wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | apt-key add - \
#&& echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.4.list \
#&& apt-get update \
#&& apt-get install -y mongodb-org
"


function use_local_base {
#echo -e "At use_local_base\n \$1:$1\n \$2:$2\n \$3:$3\n \$4:$4"
#echo -e "\n app:$app\n DEVELOPMENT_PLATFORM:$DEVELOPMENT_PLATFORM\n PLATFORM_VERSION:$PLATFORM_VERSION\n ROOT_BUILD:$ROOT_BUILD"
#exit ${LINENO}
  local app=$1
  local PLATFORM_VERSION=$2
  local DEVELOPMENT_PLATFORM=$3
  local NAMESPACE="local"
  local IMAGE="${NAMESPACE}/$(basename ${PLATFORM_VERSION})"
  dosetenv ${app} ${DEVELOPMENT_PLATFORM} ${PLATFORM_VERSION}

  DOCKERFILE=../$(basename ${PLATFORM_VERSION})/Dockerfile
  if [ -f ${DOCKERFILE} ]; then
    if [ ${DEVELOPMENT_PLATFORM} ];then DEVELOPMENT_PLATFORM=":${DEVELOPMENT_PLATFORM}";fi

    if ! docker images|grep --quiet --word-regexp ${IMAGE}; then usage image ${IMAGE} not found; fi
    ## PRIME OUTFILE
    >./${app}/Dockerfile
    ##  GENERATE DOCKER FILE
#${EMBED_USER}
    cat >>./${app}/Dockerfile <<EOF
#!/bin/bash
### GENERATED BY: dosetup
FROM local/$(basename ${PLATFORM_VERSION})${DEVELOPMENT_PLATFORM} as ${app}
${EMBED_USER}
CMD [ "/bin/bash" ]
FROM ${app} as ${app}packages
${EMBED_MONGODB}
${MONGO_USER}

RUN sudo apt-get clean
EOF
#${EMBED_DOCKER}
#${EMBED_COMPOSE}
#${EMBED_MONGODB}
#${MONGO_USER}
#${EMBED_NMAP}
#${EMBED_TREE}
#${EMBED_GIT}
      if ${ISBUILDTEST}; then
    cat >./${app}/Dockerfile <<EOF
#
EOF
    fi

  else
    usage no Dockerfile: $DOCKERFILE \
    && echo -e "app:$app\nPLATFORM_VERSION:$PLATFORM_VERSION\nDEVELOPMENT_PLATFORM:$DEVELOPMENT_PLATFORM"
  fi
  #cp ./generic/Dockerfile.${DEVELOPMENT_PLATFORM} ./${app}/
}
function dosetenv {
#echo -e "At dosetenv\n$app\n$DEVELOPMENT_PLATFORM\n$3"
#exit ${LINENO}
  local OS_CLAUSE="OS=${DEVELOPMENT_PLATFORM}"
  LOCALUSER_CLAUSE='LOCALUSER="--arg=LOCALUSER=${USER}"'
  USER_CUSER_CLAUSE='_USER_="-u ${CUSER}"'
   ## COPY AND CHANGE ENV FILE UNLESS MARKED STICKY
  if [ ! -f ${app}/setenv ]; then cp ./generic/setenv ${app}/
#    echo ${OS_CLAUSE} >>~/sandbox/assets.docker/${app}/setenv
#    echo ${LOCALUSER_CLAUSE} >>~/sandbox/assets.docker/${app}/setenv
#    echo ${USER_CUSER_CLAUSE} >>~/sandbox/assets.docker/${app}/setenv

#    echo RUNENV=\"-e=\'DOCKER_ENV=\${APP}\'\" >>~/sandbox/assets.docker/${app}/setenv
#    echo REMOVE=true >>~/sandbox/assets.docker/${app}/setenv
#    echo PRIV=false >>~/sandbox/assets.docker/${app}/setenv



    if [ ! -k ${app}/setenv ]; then
      sed -i '' "s/generic/${app}/" ${app}/setenv
      if [[ ${app} == "mkl-mongo" ]]; then
        sed -i '' "s/PRIV=false/PRIV=true/" ${app}/setenv; fi
      chmod 1644 ${app}/setenv
    fi
  fi
}
function generate_new_dockerfile {
#echo -e "At generate_new_dockerfile\n \$1:$1\n \$2:$2\n \$3:$3\n \$4:$4"
#echo -e "\n app:$app\n DEVELOPMENT_PLATFORM:$DEVELOPMENT_PLATFORM\n PLATFORM_VERSION:$PLATFORM_VERSION\n ROOT_BUILD:$ROOT_BUILD"
#exit ${LINENO}
  local app=$1
  local DEVELOPMENT_PLATFORM=$2
  local PLATFORM_VERSION=$3
  local ROOT_BUILD=$4
  local IS_ROOT_BUILD=false
  if [ ! ${PLATFORM_VERSION} ];then PLATFORM_VERSION=latest;fi
  if [ ${ROOT_BUILD} ];then IS_ROOT_BUILD=true;fi

  dosetenv ${app} ${DEVELOPMENT_PLATFORM}
  USER_ROOT_CLAUSE='_USER_="-u root"'

  ## PRIME OUTFILE
  >./${app}/Dockerfile.${DEVELOPMENT_PLATFORM}
  ##  GENERATE DOCKER FILE
  cat >>./${app}/Dockerfile.${DEVELOPMENT_PLATFORM} <<EOF
#!/bin/bash
### GENERATED BY: dosetup
FROM local/${DEVELOPMENT_PLATFORM}-appdev:${PLATFORM_VERSION} as root
ARG gituser
ARG DOCKER_ENV=$app
ARG LOCALUSER

ENV GIT_SSH=/root/bin/git-ssh
ARG ROOT_SAFE_PATH=\\\\/root
ARG GIT_CONFIG=/root/.gitconfig
ARG KNOWN_HOSTS=/root/.ssh/known_hosts
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/.gitconfig \$GIT_CONFIG
COPY assets.docker/known_hosts \$KNOWN_HOSTS

ARG SSH_PRIVATE_KEY
ARG SSH_PRIVATE_KEY_STREAM
RUN echo "\${SSH_PRIVATE_KEY_STREAM}" > /root/.ssh/\$SSH_PRIVATE_KEY

RUN chmod 700 /root/.ssh \
&& chmod 755 /root/bin \
&& chmod 755 \$GIT_SSH \
&& chmod 600 \$KNOWN_HOSTS \
&& chmod 644 \$GIT_CONFIG \
&& sed -i 's/\/Users\/'\$LOCALUSER'/'\$ROOT_SAFE_PATH'/' \$GIT_CONFIG \
&& chmod 600 /root/.ssh/\$SSH_PRIVATE_KEY

WORKDIR /root
ENV DOCKER_ENV=\$DOCKER_ENV
VOLUME /$app
RUN git clone git@github.com:\$gituser/$app /$app \
&& ln -fsn /$app /root/$app \
&& echo '### SHARED HISTORY ###\n\
if [ -d \${HOME}/public.assets/bash_history/ ]; then export HISTFILE="\${HOME}/public.assets/bash_history/history.\${DOCKER_ENV}"; fi && green "Shared bash history at:" && echo \${HISTFILE}\n\
'\
>>/root/.bashrc \
&& apt-get -qq clean
CMD [ "/bin/bash" ]
EOF

  if ! ${IS_ROOT_BUILD}; then
    sed -i '' "s/${USER_ROOT_CLAUSE}/${USER_CUSER_CLAUSE}/" ${app}/setenv \
      && cat >>./${app}/Dockerfile.${DEVELOPMENT_PLATFORM}
  else
    printf '\e[33m%s\e[m\n' "root build"
    sed -i '' "s/${USER_CUSER_CLAUSE}/${USER_ROOT_CLAUSE}/" ${app}/setenv;
  fi <<EOF
FROM root as user
ARG CUSERPATH=/home
ARG CUSER=\$gituser
ARG CUSERHOME=\$CUSERPATH/\$CUSER
RUN useradd -ms /bin/bash -d \$CUSERHOME -U \$CUSER
USER \$CUSER
WORKDIR \$CUSERHOME

ENV DOCKER_ENV=\$DOCKER_ENV
ENV GIT_SSH=\$CUSERHOME/bin/git-ssh
ARG ROOT_SAFE_PATH=\\\\\$CUSERPATH\\\\/\$CUSER
ARG GIT_CONFIG=\$CUSERHOME/.gitconfig
ARG KNOWN_HOSTS=\$CUSERHOME/.ssh/known_hosts
ARG GIT_IGNORE_GLOBAL=\$CUSERHOME/.gitignore_global
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/.gitconfig \$GIT_CONFIG
COPY assets.docker/known_hosts \$KNOWN_HOSTS
COPY assets.docker/.gitignore_global \$GIT_IGNORE_GLOBAL

ARG SSH_PRIVATE_KEY_PATH=\$CUSERHOME/.ssh
ARG KEYSTREAM="echo \"\${SSH_PRIVATE_KEY_STREAM}\" > \$SSH_PRIVATE_KEY_PATH/\$SSH_PRIVATE_KEY"
RUN sudo su - -c "\$KEYSTREAM"

RUN sudo chown -R \$CUSER:\$CUSER /$app /$app/.git \
&& sudo chown -R \$CUSER:\$CUSER \$CUSERHOME \
&& ln -fsn /$app $app \
&& sudo chmod 700 \$CUSERHOME/.ssh \
&& sudo chmod 755 \$CUSERHOME/bin \
&& sudo chmod 755 \$GIT_SSH \
&& sudo chmod 600 \$KNOWN_HOSTS \
&& sudo chmod 644 \$GIT_CONFIG \
&& sudo chmod 644 \$GIT_IGNORE_GLOBAL \
&& sudo sed -i 's/\/Users\/'\$LOCALUSER'/'\$ROOT_SAFE_PATH'/' \$GIT_CONFIG \
&& sudo chmod 600 \$SSH_PRIVATE_KEY_PATH/\$SSH_PRIVATE_KEY


ENV DOCKER_ENV=\$DOCKER_ENV
RUN echo '\
export PS1="\\\[\\\033[1;34m\\\]\\\u\\\[\\\033[0m\\\]@\\\[\\\033[1;31m\\\]\\\h:\\\[\\\033[0;37m\\\]\\\w\\\[\\\033[0m\\\] \\\$ "\n\
export HISTTIMEFORMAT="%F	%T	"\n\
alias ls="ls -Altr --color=auto"\n\
if [ -d \${HOME}/public.assets/bash_history/ ]; then export HISTFILE="\${HOME}/public.assets/bash_history/history.\${DOCKER_ENV}"; fi\
 && green "Shared bash history at: " && echo \${HISTFILE}\n\
pushd /\${APP} >/dev/null 2>&1 && git pull 2>/dev/null && popd >/dev/null 2>&1 || popd >/dev/null 2>&1\n\
'\
>>\$CUSERHOME/.bashrc
EOF
}


function create_git {
local REPO="${1}"

if [[ ${REPO} = $(curl -s -H "Authorization: token $(cat ${GITTOKEN})" \
-H "Accept: application/vnd.github.v3+json" \
https://api.github.com/repos/${GITUSER}/${REPO}\
|jq -r .name) ]]; then printf '\e[33m%s\e[m\n' "repo exists: ${REPO}" && return ${LINENO}; fi

mkdir -p /tmp/gitwork/dosetup/${REPO} && pushd ${_}

local RETURN=$(JSON={\"name\":\"${REPO}\"} && \
curl -s --url https://api.github.com/user/repos -d ${JSON} \
-K- <<<"--user ${GITLOGIN}:$(cat ${GITTOKEN})"|jq -r .ssh_url)

if [[ $(basename ${RETURN}) == ${REPO}.git ]]; then
  git init
  COMMIT_MESSAGE="initial commit"
  git remote add origin git@github.com:${GITUSER}/${REPO}.git
  echo "${REPO}" >README.md
  git add . && git commit -m "$COMMIT_MESSAGE"
  git push --set-upstream origin master
fi
popd
}

function create_sandbox_runner {
  ## COPY & CHANGE RUN FILE UNLESS MARKED STICKY
  if [ ! -k ~/sandbox/${app} ]; then
    cp -p ~/sandbox/generic ~/sandbox/${app}
    sed -i '' "s/generic/${app}/" ~/sandbox/${app}
  fi
}


### main
CUSER=${GITUSER}
#echo -e "using ${CUSER} for clone\nenter appname: " && read app
msg "Generate dockerfile is ${GENERATE}"
echo "using ${CUSER} for clone"
read -p "appname: ${app}? (Y/n) " yn
yn=${yn:-Y}
if [[ ! ${yn} == Y ]] && [[ ! ${yn} == y ]]; then usage && exit ${LINENO}; fi



# SYM LINK THE SANDBOX -APP DIR
echo "Creating assets.${app}-application"
mkdir -p ../assets.${app}-application && echo '*' >${_}/.gitignore
echo "Creating ./${app}/assets.docker"
mkdir -p ./${app}/assets.docker
echo "linking them..."
ln -fsn ~/Docker/assets.${app}-application ~/sandbox/assets.docker/${app}



dosetenv
## HARD LINK SETENV
ln -fn ${app}/setenv ~/sandbox/assets.docker/${app}/


# HARD LINK PRIVATE ASSETS
for f in $(/bin/ls -A ./private.assets/|grep -vE '.gitignore$'); do ln -fn ./private.assets/$f ./${app}/assets.docker/; done
# HARD LINK RUN FILES
for f in dobuild rundb rundev; do ln -fn ./generic/${f} ./${app}/; done


# SYM LINK THE EXECUTABLES TO THE SANDBOX
for f in setenv dobuild rundb rundev; do ln -fsn ${PWD}/${app}/${f} ~/sandbox/assets.docker/${app}/ ;done
mv ~/sandbox/assets.docker/${app}/rundev ~/sandbox/assets.docker/${app}/dev
mv ~/sandbox/assets.docker/${app}/dobuild ~/sandbox/assets.docker/${app}/build

CREATEGIT=false
if ${CREATEGIT}; then create_git ${app}; fi

if [[ ${GENERATE} == LOCAL ]];
  then use_local_base ${app} ${DEVELOPMENT_PLATFORM} ${PLATFORM_VERSION};
elif [[ ${GENERATE} == ON ]];
  then generate_new_dockerfile ${app} ${DEVELOPMENT_PLATFORM} ${PLATFORM_VERSION} ${ROOT_BUILD};
else
  usage bad generate
  exit ${LINENO}
fi


## BUILD COMTAINER
echo "Building container"
echo -e "${TAGLIST}" >./${app}/taglist
~/sandbox/assets.docker/${app}/build
#echo $LINENO
create_sandbox_runner
