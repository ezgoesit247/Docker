#!/bin/bash

_GENERATE_=ON
function usage {
  echo "Usage $(basename $0) [app] [platform (eg centos8 | ubuntu18)]"
  echo "Gernerate dockerfile is ${_GENERATE_}"
}

function copy_generic_dockerfile {
  cp ./generic/Dockerfile.${DEVELOPMENT_PLATFORM}.sh ./${app}/
}
function generate_dockerfile {
  local app=$1
  local DEVELOPMENT_PLATFORM=$2

  echo "OS=${DEVELOPMENT_PLATFORM}" >>~/sandbox/assets.docker/${app}/setenv
#  echo "PRIV=--priv" >>~/sandbox/assets.docker/${app}/setenv
  echo "_USER_=\"-u \${CUSER}\"" >>~/sandbox/assets.docker/${app}/setenv

  ##  GENERATE DOCKER FILE
  cat >./${app}/Dockerfile.${DEVELOPMENT_PLATFORM}.sh <<EOF
### BUILT WITH dosetup
FROM local/${DEVELOPMENT_PLATFORM}-appdev as root
ARG gituser
ARG CUSERHOME=/home/\$gituser
RUN useradd -ms /bin/bash -d \$CUSERHOME -U \$gituser

ENV GIT_SSH=/root/bin/git-ssh
ARG ROOT_SAFE_PATH=\\\\/root
ARG GIT_CONFIG=/root/.gitconfig
ARG KNOWN_HOSTS=/root/.ssh/known_hosts
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/.gitconfig \$GIT_CONFIG
COPY assets.docker/known_hosts \$KNOWN_HOSTS

ARG SSH_PRIVATE_KEY
ARG SSH_PRIVATE_KEY_STREAM
RUN echo "\${SSH_PRIVATE_KEY_STREAM}" > /root/.ssh/\$SSH_PRIVATE_KEY

RUN chmod 700 /root/.ssh \
&& chmod 755 /root/bin \
&& chmod 755 \$GIT_SSH \
&& chmod 600 \$KNOWN_HOSTS \
&& chmod 644 \$GIT_CONFIG \
&& sed -i 's/\/Users\/***REMOVED***/'\$ROOT_SAFE_PATH'/' \$GIT_CONFIG \
&& chmod 600 /root/.ssh/\$SSH_PRIVATE_KEY

VOLUME /$app
RUN git clone git@github.com:\$gituser/$app /$app \
&& chown -R \$gituser:\$gituser /$app /$app/.git \
&& ln -fsn /$app \$CUSERHOME/$app
RUN apt-get -qq clean



FROM root as user
USER \$gituser
WORKDIR \$CUSERHOME
ENV GIT_SSH=\$CUSERHOME/bin/git-ssh
ARG ROOT_SAFE_PATH=\\\\/home\\\\/\$gituser
ARG GIT_CONFIG=\$CUSERHOME/.gitconfig
ARG KNOWN_HOSTS=\$CUSERHOME/.ssh/known_hosts
ARG GIT_IGNORE_GLOBAL=\$CUSERHOME/.gitignore_global
COPY assets.docker/git-ssh \$GIT_SSH
COPY assets.docker/.gitconfig \$GIT_CONFIG
COPY assets.docker/known_hosts \$KNOWN_HOSTS
COPY assets.docker/.gitignore_global \$GIT_IGNORE_GLOBAL

ARG SSH_PRIVATE_KEY_PATH=\$CUSERHOME/.ssh
ARG KEYSTREAM="echo \"\${SSH_PRIVATE_KEY_STREAM}\" > \$SSH_PRIVATE_KEY_PATH/\$SSH_PRIVATE_KEY"
RUN sudo su - -c "\$KEYSTREAM"

RUN sudo chown -R \$gituser:\$gituser \$CUSERHOME \
&& sudo chmod 700 \$CUSERHOME/.ssh \
&& sudo chmod 755 \$CUSERHOME/bin \
&& sudo chmod 755 \$GIT_SSH \
&& sudo chmod 600 \$KNOWN_HOSTS \
&& sudo chmod 644 \$GIT_CONFIG \
&& sudo chmod 644 \$GIT_IGNORE_GLOBAL \
&& sudo sed -i 's/\/Users\/***REMOVED***/'\$ROOT_SAFE_PATH'/' \$GIT_CONFIG \
&& sudo chmod 600 \$SSH_PRIVATE_KEY_PATH/\$SSH_PRIVATE_KEY


RUN echo '\
if ! sudo service docker status; then sudo service docker start; fi\n\
#sleep 2\n\
sudo service docker status\n\
#sudo docker run --rm hello-world 2> /dev/null | grep -o "Hello from Docker!"\n\
'\
>>\$CUSERHOME/.bashrc

ARG DOCKER_ENV=$app
ENV DOCKER_ENV=\$DOCKER_ENV
RUN echo '\
export PS1="\[\033[1;34m\]\u\[\033[0m\]@\[\033[1;31m\]\h:\[\033[0;37m\]\w\[\033[0m\]\$ "\n\
export HISTTIMEFORMAT="%F	%T	"\n\
alias ls="ls -Altr --color=auto"\n\
if [ -d \${HOME}/public.assets/bash_history/ ]; then export HISTFILE="\${HOME}/public.assets/bash_history/history.\${DOCKER_ENV}"; fi && green "Shared bash history at: " && echo \${HISTFILE}\n\
pushd /\${APP} >/dev/null 2>&1 && git pull 2>/dev/null && popd >/dev/null 2>&1 || popd >/dev/null 2>&1\n\
'\
>>\$CUSERHOME/.bashrc

EOF
}

function create_git {
REPO=${1}

mkdir -p "/tmp/gitwork/${REPO}" && pushd "${_}"

COMMIT_MESSAGE="initial commit"
JSON={\"name\":\"${REPO}\"} && \
curl -s --url https://api.github.com/user/repos -d ${JSON} \
-K- <<< "--user ${GITLOGIN}:${GITTOKEN}"|grep ssh_url|sed 's/.\{1\}$//' || \
echo create remote repr failed || exit ${LINENO}

git init
git remote add origin git@github.com:***REMOVED***/${REPO}.git

echo "${REPO}" >README.md

git add . && git commit -m "$COMMIT_MESSAGE"
git push --set-upstream origin master

popd
}


### main

app=$1 && DEVELOPMENT_PLATFORM=$2
if [ ! $app ]; then usage no app && exit $LINENO; fi
if [ ! $DEVELOPMENT_PLATFORM ]; then usage no platform && exit $LINENO; fi

create_git ${app}
CUSER=${GITUSER}
#echo -e "using ${CUSER} for clone\nenter appname: " && read app
echo "using ${CUSER} for clone"
read -p "appname ${app}? (Y/n) " yn
yn=${yn:-Y}
if [[ ! ${yn} == Y ]] && [[ ! ${yn} == y ]]; then usage && exit ${LINENO}; fi

mkdir -p ./${app}/assets.docker

# HARD LINK PRIVATE ASSETS
for f in $(/bin/ls -A ./private.assets/|grep -vE '.gitignore$'); do ln -fn ./private.assets/$f ./${app}/assets.docker/; done
# HARD LINK RUN FILES
for f in dobuild rundb rundev; do ln -fn ./generic/$f ./${app}/; done

# COPY AND CHANGE ENV FILE
echo "Building dev container"
cp ./generic/setenv ${app}/
sed -i '' "s/generic/${app}/" ${app}/setenv
ln -fn ${app}/setenv ~/sandbox/assets.docker/${app}/
# SYM LINK THE EXECUTABLES TO THE SANDBOX
for f in setenv dobuild rundb rundev; do ln -fsn ${PWD}/${app}/$f ~/sandbox/assets.docker/${app}/ ;done

if [[ ! ${_GENERATE_} == ON ]];
  then copy_generic_dockerfile;
  else generate_dockerfile ${app} ${DEVELOPMENT_PLATFORM};
fi

mkdir -p ../assets.${app}-application && echo '*' >${_}/.gitignore

# SYM LINK THE SANDBOX -APP DIR
ln -fsn ~/Docker/assets.${app}-application ~/sandbox/assets.docker/${app}

## BIULD DEVE LOPMENT COMTAINER
~/sandbox/assets.docker/${app}/dobuild
#echo $LINENO && exit $LINENO
## COPY & CHANGE RUN FILE
cp -p ~/sandbox/generic ~/sandbox/${app}
sed -i '' "s/generic/${app}/" ~/sandbox/${app}

## GET THE PROJECT CODE
#git clone git@github.com:${CUSER}/${app} ~/Docker/assets.${app}-application/${app}
