#!/bin/bash

docker_dir=${HOME}/Docker
function msg {
  echo "  build::${1} says, ${2}"
}
function init { #
  for path in ~/Docker/root_docker/node_r_admin ~/Docker/root_docker/awsdev_r_admin ~/Docker/root_docker/terraform_r_admin ~/Docker/root_docker/kubernetes_r_admin ~/Docker/root_docker/docker_r_admin ~/Docker/root_docker/development_r_admin ~/Docker/root_docker/ubuntu_seed_r_admin ~/Docker/root_docker/ubuntu_seed_r_admin
  do pushd ${path} > /dev/null; done
}
function do_build {
   CMD="docker build ${RM} -t ${REMOTE}${1} ."
   msg "do_build" "executing: ${CMD}"
#   while ! docker build ${RM} -t ${REMOTE}${1} . | grep -i SUCCESSFULLY; do
   while ! ${CMD} | grep -i SUCCESSFULLY; do
      if [ ! -f ./Dockerfile ] && [ -f ./Dockerfile.sh ]; then
         msg "do_build" "${1}/Dockerfile.sh -> ${1}/Dockerfile" \
            && ln -s ./Dockerfile.sh ./Dockerfile \
            && msg "do_build" "Retrying..." && continue
      fi
      msg "do_build" "Error in ${REMOTE}${1}, fix then press <Enter> to retry"; usage;
      read x; msg "do_build" "Retrying for tag ${REMOTE}${1}";
   done
}
function build {
  tag=$1
  if [[ ${tag} == ubuntu_seed_r_admin ]];
    then do_build ${tag} \
      && tag=${tag}:20.04; do_build ${tag}
    else do_build ${tag}
  fi
}
function usage {
   echo -e "\n Usage:\tbuild [NAME] looks for Dockerfile ${docker_dir}/NAME/\n\tbuild NOARGS looks for Dockerfile in PWD"; echo
}
function error
{
    # Send the first element as one argument, and the rest of the elements as a combined argument.
    # Arguments to println:
    #   1 -> '\e[31mError (%d): %s\e[m'
    #   2 -> "$1"
    #   3 -> "${*:2}"

    println '\e[31mError (%d): %s\e[m' "$1" "${*:2}"
    exit "$1"
}
function success
{
    # Send the first element as one argument, and the rest of the elements as a combined argument.
    # Arguments to println:
    #   1 -> '\e[31mError (%d): %s\e[m'
    #   2 -> "$1"
    #   3 -> "${*:2}"

    println '\e[32mComplete: %s\e[m' "${*:1}"
}
function println
{
   printf "$1\n" "${@:2}"
}
RM=""
REMOTE="local/"
for i in "$@"
do
case $i in
-r|--rm)
   RM=" --rm"
   shift
   ;;
### LOCAL IS DEFAULT ###
--local)
   REMOTE="local/"
   shift
   ;;
--remote=*)
   REMOTE="${i#*=}/"
   shift
   ;;
esac
done
###
# - main
###
if [ -d ${docker_dir}/${1} ] && [ ! -z ${1} ]; then
  pushd ${docker_dir}/${1} > /dev/null
  build ${1}
  popd
  else build ${PWD##*/}
fi
