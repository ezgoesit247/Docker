#!/bin/bash
. ${HOME}/.bash_library

if [ ${DEBUG} ] && [ ${DEBUG} -gt 0 ]; then debug=1; else debug=0; fi;
docker_dir=${HOME}/Docker
function msg {
  green2 "build::${1}" "${2}"
}
function err {
  red2 "build::${1}" "${2}"
}
function build_all {
  echo build_all not implemented
  for f in ${build_list[@]}; do if [ -f ${f} ] && [ ! -d ${f} ]; then echo "${f%/*}/"|sed 's/\.\//~\/Docker\//'; fi; done
  exit ${LINENO}
  build_list=${1}
  for d in "${build_list[@]}"; do
#  if [ -f ${d} ]; then d="${d%/*}/"; fi
#  if [ ! -d ${d} ]; then red2 ${LINENO} need directory; fi

  pushd ${d} > /dev/null; done
  for d in "${build_list[@]}"; do
    build ${PWD##*/}
    popd >/dev/null
  done

}
function build {
  local tag="${1}"
#  if [[ ${tag} == ubuntu_seed_r_admin ]];
#    then do_build ${tag} \
#      && tag=${tag}:20.04; do_build ${tag}
#    else do_build "${tag}"
#  fi
  do_build "${tag}"
}
function do_build {
#   if [[ -n ${TAG} ]]; then TG=" -t ${REMOTE}${1}:${TAG}"; fi
#   CMD="docker build ${NOCACHE} ${ARGS} --rm -t ${REMOTE}${1} ${TG} ${STREAM_ARG} ."
   local TAGS="${*}"
   CMD="docker build ${NOCACHE} ${ARGS} --rm ${TAGS} ${STREAM_ARG} ."
  msg "do_build:${LINENO}" "trying: ${CMD}"
  if [ ${debug} -eq 1 ]; then exit ${LINENO}; else
    #if ! ${CMD}; then msg "do_build:${LINENO}" "retrying: ${CMD}"
      eval ${CMD}
    #fi
  fi
}
function usage {
   echo -e "\n Usage:\tbuild [NAME] looks for Dockerfile ${docker_dir}/NAME/\n\tbuild NOARGS looks for Dockerfile in PWD"; echo
}
function success {
    println '\e[32mComplete: %s\e[m' "${*:1}"
}
function println {
   printf "$1\n" "${@:2}"
}
function green2 {
   println '\t(%s)\e[32m %s\e[m' "$1" "${*:2}"
}
function red2 {
   println '\t(%s)\e[31m %s\e[m' "$1" "${*:2}"
}
RM=""
REMOTE="local/"
for i in "$@"
do
case $i in
-r|--rm)
   RM=" --rm"
   shift
   ;;
-t=*)
   TAG="${i#*=}"
   shift
   ;;
-t)
  MYTAG="${2}"
  shift
  shift
  ;;
--usertag)
  USERTAG="${2}"
  shift
  shift
  ;;
-n|--nc|--no-cache)
   NOCACHE=--no-cache
   shift
   ;;
### THIS IS THE DEFAULT why is this even here? ###
--local)
   REMOTE="local/"
   shift
   ;;
--remote=*)
   REMOTE="${i#*=}/"
   shift
   ;;
--arg=*)
   ARGS="${ARGS} --build-arg ${i#*=}"
   shift # past argument=value
   ;;
--key|--pem)
  shift
  BUILD_ARG=${1}
  PEM_KEY_FILE=${2}
  STREAM_ARG="--build-arg ${BUILD_ARG}=\"\$(cat ${PEM_KEY_FILE})\""
#  echo ${STREAM_ARG} && echo ${1} && echo ${2} && exit 1
  shift
  shift
  ;;
-a)
   BUILDALL=1
   shift
   ;;
--all)
   BUILDALL=1 && NOCACHE=--no-cache
   shift
   ;;
-f)
  shift
  FNAME=${1} && FILETAG="$(echo ${1#*.}|awk -F. '{print $1}')"
  shift
  ;;
esac
done
###
# - main
###
_BUILDTYPE_="local/seed"
pushd ~/Docker >/dev/null && build_list=(); for f in $(searchfor "FROM ${_BUILDTYPE_}" Dockerfile|awk -F: '{print $1}'|grep -vE './seed'); do build_list+=($f); done && popd >/dev/null

#build_list=(~/Docker/gituser/ ~/Docker/docker/ ~/Docker/ubuntu-systemd/ ~/Docker/jdk8header/ ~/Docker/ubuntu-terraform/ ~/Docker/ruby/)

if [ ${BUILDALL} ]; then if [ ! "${#build_list[@]}" -gt 0 ];then echo need build_list\(\) && exit ${LINENO};fi
build_all ${build_list} && exit 0; fi

if [ -d ${docker_dir}/${1} ] && [ ! -z ${1} ]; then
  pushd ${docker_dir}/${1} > /dev/null && DIR=$(basename ${1})
  if [ -f ${FNAME} ]; then doc ${FNAME}; else doc; fi
  TAGS="-t ${REMOTE}${DIR}"
  if [ ${TAG} ]; then TAGS="${TAGS} -t ${REMOTE}${TAG}"; fi
  if [ ${FILETAG} ]; then TAGS="${TAGS} -t ${REMOTE}${DIR}:${FILETAG}"; fi
  if [ ${TAG} ] && [ ${FILETAG} ]; then TAGS="${TAGS} -t ${REMOTE}${TAG}:${FILETAG}"; fi
  if [ ${MYTAG} ] && [ ! ${FILETAG} ]; then TAGS="${TAGS} -t ${REMOTE}${DIR}:${MYTAG}"; fi
  if [ ${USERTAG} ]; then TAGS="${TAGS} -t ${REMOTE}${DIR}:${USERTAG}"; fi
  if [ ${debug} -eq 1 ]; then yellow "(${LINENO}) Calling build ${TAGS}" && popd && exit ${LINENO}; fi
  build "${TAGS}"
  popd >/dev/null
else
  if [ -f ${FNAME} ]; then doc ${FNAME}; fi
  if [ $MYTAG ];then TGS="-t ${REMOTE}${PWD##*/}:${MYTAG}"; fi
  if [ $TAG ];then TGS="${TGS} -t ${REMOTE}${PWD##*/}:${TAG}"; fi
  if [ ${debug} -eq 1 ]; then yellow "(${LINENO}) Calling build -t ${REMOTE}${PWD##*/} ${TGS}" && exit ${LINENO}; fi
  build "-t ${REMOTE}${PWD##*/} ${TGS}"
  for tag in $(cat taglist); do docker tag "${REMOTE}${PWD##*/}" "${REMOTE}${PWD##*/}:${tag}" && echo "${REMOTE}${PWD##*/}:${tag}"; done
fi
