#!/bin/sh
#docker volume ls!/bin/bash

# THIS RUNS FIRST
if [ $# -eq 0 ]; then docker volume ls|grep -v -E '[a-z0-9]{64}'; exit 0; fi
# DON'T MOVE THIS... THAT?


function usage {
  echo ${*} && exit 1
}
function do_remove_vol {
#  if docker volume rm ${VOL} >/dev/null 2>&1; then echo "removed volume ${VOL}" && return 0; fi;
  for v in "${VOL}";
    do docker volume rm ${v} >/dev/null 2>&1 && echo removed volume $v; done && return 0;
  usage can\'t remove volume ${VOL};
}
function do_create_vol {
  local s=$(docker volume create ${VOL}) && echo "volume ${s} exists" && return 0
}
function do_list {
    if ! docker volume ls|grep -v -E '[a-z0-9]{64}'|grep ${VOL}; then
    echo "${VOL} not found"; fi
}
function run_inspect_container {
  if [ ${VOL} ]; then local ARY=($(docker volume inspect ${VOL}|grep -i mountpoint|sed 's/"//g; s/,//g;')); fi
  local VOLPATH=${ARY[1]} && if [ ! ${VOLPATH} ];then VOLPATH=/var/lib/docker/volumes; fi
  echo -e running Debian container, fid volume by running:"\n\t"du -d 1 -h ${VOLPATH}
  docker run -it --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i bash
  exit 0
}
function get_size {
  local s=$(docker volume inspect ${VOL} 2>/dev/null)
  local ARY=($(echo -e "${s}"|grep -i mountpoint|sed 's/"//g; s/,//g;';))
  if [ ${#ARY[@]} -gt 0 ]; then
    echo -e "${s}\ngetting size..."
    docker run --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i /usr/bin/du -d 0 -h ${ARY[1]}
  else usage volume not found: ${VOL}; fi
  exit 0
}
function do_network {
  docker network ls
}
function help {
  echo "\t-i [VOL]: inspect\n\t-s [VOL]: size\n\t-c [VOL]: create\n\t-l [VOL]: list\n\t-r [VOL]: remove\n\t-n: network"
}

for i in "$@"
do
case $i in
-i|--inspect)
  shift
  VOL="${1}" && INSPECT=1
  shift
#  if [ ! ${VOL} ]; then usage need volume arg; fi
  ;;
-n|-network)
  #shift
  NETWORK=$@ && NET=1
  shift
  if [ ! $# -eq 0 ]; then usage no args for network; fi
  ;;
-s|-size)
  shift
  VOL="${1}" && SIZE=1
  shift
  if [ ! ${VOL} ]; then usage need volume arg; fi
  ;;
-r)
  shift
  VOL=$@ && RVOL=1
  if [ ! $# -gt 0 ]; then usage need volume arg; fi
  shift
  ;;
-l|-list)
  shift
  VOL="${1}" && LVOL=1
  shift
  if [ ! ${VOL} ]; then usage need volume arg; fi
  ;;
-c|-create)
  shift
  VOL="${1}" && CVOL=1
  shift
  if [ ! ${VOL} ]; then usage need volume arg; fi
  ;;
-h|-help|--help)
  help && exit $LINENO
  ;;
esac
done

if [ ${LVOL} ]; then do_list; fi
if [ ${INSPECT} ]; then run_inspect_container; fi
if [ ${SIZE} ]; then get_size; fi
if [ ${RVOL} ]; then do_remove_vol; fi
if [ ${CVOL} ]; then do_create_vol; fi
if [ ${NET} ]; then do_network; fi

unset VOL
unset RVOL
unset LVOL
unset CVOL
unset INSPECT
unset SIZE
